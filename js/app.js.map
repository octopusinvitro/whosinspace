{"version":3,"sources":["client.js","map.js","ui.js","clock.js"],"names":["Client","_classCallCheck","this","_url","_astronautsEndpoint","_issEndpoint","onSuccess","onFailure","options","url","astronautsURL","property","_getURL","issURL","_this","xhr","XMLHttpRequest","responseType","onreadystatechange","readyState","DONE","status","response","_buildHTTPError","open","setRequestHeader","send","error","_buildGenericError","Number","isInteger","statusText","body","concat","Map","mapID","map","L","_marker","_initialZoom","_iconImage","source","width","height","alt","_decimalPositions","_token","_attribution","initialize","setZoom","_addTile","_addMarker","latitude","longitude","setView","setLatLng","latLng","bindPopup","_popupContent","openPopup","attribution","maxZoom","id","tileSize","zoomOffset","accessToken","tileLayer","addTo","icon","iconUrl","iconSize","iconAnchor","popupAnchor","marker","_truncate","decimalNumber","parseFloat","toFixed","UI","client","_this2","update","_client","getAstronauts","_onAstronautsSuccess","_onFailure","getISSPosition","_onPositionSuccess","displayClock","time","_clock","textContent","_zeroPad","hour","minutes","seconds","toggleAlertClock","classList","add","_alertClockClass","remove","_defaultClockClass","toggleDefaultClock","astronauts","_updateCount","_updateTable","position","_map","_count","length","row","fragment","DocumentFragment","forEach","astronaut","document","createElement","insertCell","name","craft","appendChild","_table","innerHTML","_error","getElementById","countID","astronautsID","errorID","clockID","defaultClockClass","alertClockClass","addEventListener","console","log","number","toString","padStart","Clock","ui","_this3","start","tick","setTimeout","SMALL_TICK","_now","_ui","_isLongTick","Audio","play","_isNormalTick","date","Date","getHours","getMinutes","getSeconds","LONG_TICK"],"mappings":"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","file":"app.js","sourcesContent":["class Client {\n  constructor() {\n    this._url = 'http://api.open-notify.org';\n    this._astronautsEndpoint = '/astros.json';\n    this._issEndpoint = '/iss-now.json';\n  }\n\n  getAstronauts(onSuccess, onFailure) {\n    let options = {\n      url: this.astronautsURL,\n      onSuccess: onSuccess,\n      onFailure: onFailure,\n      property: 'people'\n    }\n\n    this._getURL(options);\n  }\n\n  getISSPosition(onSuccess, onFailure) {\n    let options = {\n      url: this.issURL,\n      onSuccess: onSuccess,\n      onFailure: onFailure,\n      property: 'iss_position'\n    }\n\n    this._getURL(options);\n  }\n\n  get astronautsURL() {\n    return `${this._url}${this._astronautsEndpoint}`;\n  }\n\n  get issURL() {\n    return `${this._url}${this._issEndpoint}`;\n  }\n\n  _getURL(options) {\n    let xhr = new XMLHttpRequest();\n\n    const onload = () => {\n      if (xhr.readyState !== XMLHttpRequest.DONE) { return; }\n      if (xhr.status === 200) {\n        options.onSuccess(xhr.response[options.property]);\n      } else {\n        options.onFailure(this._buildHTTPError(xhr));\n      }\n    };\n\n    // const onerror = (error) => {\n    //   options.onFailure(this._buildGenericError(xhr, error));\n    // };\n    //\n    try {\n      xhr.responseType = 'json';\n      xhr.onreadystatechange = onload\n      // xhr.onerror = onerror\n      // xhr.onabort = onerror;\n      // xhr.ontimeout = onerror;\n      xhr.open('GET', options.url);\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n    } catch(error) {\n      options.onFailure(this._buildGenericError(xhr, error));\n    }\n  }\n\n  _buildHTTPError(xhr) {\n    return {\n      status: Number.isInteger(xhr.status) ? xhr.status : '',\n      statusText: xhr.statusText,\n      url: xhr.url,\n      body: xhr.response\n    };\n  }\n  //\n  // _buildGenericError(xhr, error) {\n  //   let status = Number.isInteger(error.target.status) ? error.target.status : '',\n  //       statusText = (error.type ? `${error.type} `: '') +\n  //                    (error.name ? `${error.name} `: '')\n  //   return {\n  //     status: xhr.status ? xhr.status : status,\n  //     statusText: xhr.statusText ? `${xhr.statusText} ` : statusText,\n  //     url: xhr.url ? xhr.url : '',\n  //     body: error.message ? error.message : ''\n  //   };\n  // }\n}\n","class Map {\n  constructor(mapID) {\n    this.map = L.map(mapID);\n    this._marker = null;\n\n    this._initialZoom = 3;\n    this._iconImage = { source: '../img/iss.png', width: 191, height: 100, alt: 'ISS station' };\n    this._decimalPositions = 2;\n\n    this._token = 'pk.eyJ1Ijoib2N0b3B1c2ludml0cm8iLCJhIjoiY2s5cTZ5MnRlMGhlOTNubW14dWQ3NjJkNCJ9.G-rrNuSyagqnbFLpRG1aag';\n    this._attribution = 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>';\n\n    this.initialize();\n  }\n\n  initialize() {\n    this.map.setZoom(this._initialZoom);\n    this._addTile();\n    this._addMarker();\n  }\n\n  update(latitude, longitude) {\n    this.map = this.map.setView([latitude, longitude]);\n    this._marker.setLatLng(L.latLng(latitude, longitude));\n    this._marker.bindPopup(this._popupContent(latitude, longitude)).openPopup();;\n  }\n\n  _addTile() {\n    let templateURL = 'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}';\n\n    let options = {\n      attribution: this._attribution,\n      maxZoom: 18,\n      // id: 'mapbox/dark-v10',\n      id: 'mapbox/satellite-streets-v11',\n      tileSize: 512,\n      zoomOffset: -1,\n      accessToken: this._token\n    };\n\n    L.tileLayer(templateURL, options).addTo(this.map);\n  }\n\n  _addMarker() {\n    let options = {\n      icon: L.icon({\n        iconUrl: this._iconImage.source,\n        iconSize: [this._iconImage.width, this._iconImage.height],\n        iconAnchor: [this._iconImage.width / 2, this._iconImage.height / 2],\n        popupAnchor: [0, -this._iconImage.height / 2]\n      }),\n      alt: this._iconImage.alt\n    }\n\n    this._marker = L.marker([0, 0], options).addTo(this.map);\n  }\n\n  _popupContent(latitude, longitude) {\n    return `The ISS is at lat: <strong>${this._truncate(latitude)}</strong>, lon: <strong>${this._truncate(longitude)}</strong>.`\n  }\n\n  _truncate(decimalNumber) {\n    return Number.parseFloat(decimalNumber).toFixed(this._decimalPositions);\n  }\n}\n","class UI {\n  constructor(client, map, options) {\n    this._client = client;\n    this._map = map;\n\n    this._count = document.getElementById(options.countID);\n    this._table = document.getElementById(options.astronautsID);\n    this._error = document.getElementById(options.errorID);\n    this._clock = document.getElementById(options.clockID);\n    this._defaultClockClass = options.defaultClockClass;\n    this._alertClockClass = options.alertClockClass;\n\n    document.getElementById('call-to-action').addEventListener('click', function() {\n      console.log('hi');\n    });\n  }\n\n  update = () => {\n    this._client.getAstronauts(this._onAstronautsSuccess, this._onFailure);\n    this._client.getISSPosition(this._onPositionSuccess, this._onFailure);\n  }\n\n  displayClock = (time) => {\n    this._clock.textContent = `${this._zeroPad(time.hour)}:${this._zeroPad(time.minutes)}:${this._zeroPad(time.seconds)}`;\n  }\n\n  toggleAlertClock = () => {\n    this._clock.classList.add(this._alertClockClass);\n    this._clock.classList.remove(this._defaultClockClass);\n  }\n\n  toggleDefaultClock = () => {\n    this._clock.classList.remove(this._alertClockClass);\n    this._clock.classList.add(this._defaultClockClass);\n  }\n\n  _onAstronautsSuccess = (astronauts) => {\n    this._updateCount(astronauts);\n    this._updateTable(astronauts);\n  }\n\n  _onPositionSuccess = (position) => {\n    this._map.update(position.latitude, position.longitude);\n  }\n\n  _updateCount = (astronauts) => {\n    this._count.textContent = astronauts.length;\n  }\n\n  _updateTable = (astronauts) => {\n    let fragment = new DocumentFragment(), row, name, craft;\n\n    astronauts.forEach(function (astronaut) {\n      row = document.createElement('tr');\n\n      name = row.insertCell(0);\n      name.textContent = astronaut.name;\n\n      craft = row.insertCell(1);\n      craft.textContent = astronaut.craft;\n\n      fragment.appendChild(row);\n    });\n\n    this._table.innerHTML = '';\n    this._table.appendChild(fragment);\n  }\n\n  _onFailure = (error) => {\n    this._error.textContent += `Error: ${error.status} ${error.statusText}, when requesting URL ${error.url}.\\n${error.body}`;\n  }\n\n  _zeroPad(number) {\n    return number.toString().padStart(2, '0');\n  }\n}\n","class Clock {\n  static SMALL_TICK = 1000;\n  static LONG_TICK = 5000;\n\n  constructor(ui) {\n    this._ui = ui;\n  }\n\n  start = () => {\n    this.tick();\n    setTimeout(this.start, Clock.SMALL_TICK);\n  }\n\n  tick = () => {\n    let time = this._now();\n    this._ui.displayClock(time);\n\n    if (this._isLongTick(time.seconds)) {\n      let sound = new Audio('tada.mp3');\n      sound.play();\n\n      this._ui.update();\n      this._ui.toggleAlertClock();\n    }\n\n    if (this._isNormalTick(time.seconds)) {\n      this._ui.toggleDefaultClock();\n    }\n  }\n\n  _now = () => {\n    let date = new Date();\n    return {\n      hour: date.getHours(),\n      minutes: date.getMinutes(),\n      seconds: date.getSeconds()\n    }\n  }\n\n  _isLongTick = (seconds) => {\n    return seconds % (Clock.LONG_TICK / 1000) === 0;\n  }\n\n  _isNormalTick = (seconds) => {\n    return seconds % (Clock.LONG_TICK / 1000) === 1;\n  }\n}\n"]}